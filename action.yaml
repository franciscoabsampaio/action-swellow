name: "Run Swellow CLI"
description: "Run the Swellow CLI seamlessly in your GitHub Actions workflow."
author: "Francisco A. B. Sampaio"

branding:
  icon: "database"
  color: "blue"

inputs:
  command:
    description: "Swellow command to execute (e.g., up, down)"
    required: true
    default: "up"
  connection-string:
    description: "Database connection string"
    required: true
    default: ""
  migrations-directory:
    description: "Directory containing migration files"
    required: false
    default: "./migrations"
  args:
    description: "Additional arguments to pass to the Swellow command"
    required: false
    default: ""
  version:
    description: "Version of the binary to download (GitHub release tag)."
    required: true
    default: "latest"
  verbose:
    description: "Enable verbose output."
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Resolve release version
      id: resolve_version
      shell: bash
      run: |
        set -euo pipefail
        repo="franciscoabsampaio/swellow"
        if [[ "${{ inputs.version }}" == "latest" ]]; then
          # Use curl and a simple grep/sed to parse the latest tag from the GitHub API
          resolved_version=$(curl -fsSL "https://api.github.com/repos/${repo}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          if [[ -z "$resolved_version" ]]; then
            echo "::error::Could not resolve the latest release version for ${repo}."
            exit 1
          fi
          echo "Resolved latest version to ${resolved_version}"
          echo "version=${resolved_version}" >> $GITHUB_OUTPUT
        else
          echo "Using specified version: ${{ inputs.version }}"
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        fi

    - name: Determine platform
      id: platform
      shell: bash
      run: |
        case "${{ runner.os }}" in
          Linux)
            target="x86_64-unknown-linux-gnu"
            ext="tar.gz"
            ;;
          macOS)
            target="aarch64-apple-darwin"
            ext="tar.gz"
            ;;
          Windows)
            target="x86_64-pc-windows-msvc"
            ext="zip"
            ;;
          *)
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
            ;;
        esac

        asset_filename="release-binary-${target}.${ext}"
        echo "Asset Filename: ${asset_filename}"
        echo "Executable Name: ${executable_name}"
        
        echo "filename=${asset_filename}" >> $GITHUB_OUTPUT
        echo "executable=${executable_name}" >> $GITHUB_OUTPUT

    - name: Download and Extract Swellow
      uses: robinraju/release-downloader@v1.9
      with:
        repository: "franciscoabsampaio/swellow"
        tag: "${{ steps.resolve_version.outputs.version }}"
        fileName: "${{ steps.asset.outputs.filename }}"
        extract: true # This action handles .zip and .tar.gz automatically

    - name: Make Binary Executable
      if: runner.os != 'Windows'
      shell: bash
      run: chmod +x ./${{ steps.asset.outputs.executable }}

    - name: Run Swellow Command
      shell: bash
      run: |
        # Construct the arguments array
        CLI_ARGS=(
          --db "${{ inputs.connection-string }}"
          --dir "${{ inputs.migrations-directory }}"
        )

        # Add verbose flag only if it's true
        if [[ "${{ inputs.verbose }}" == "true" ]]; then
          CLI_ARGS+=("-v")
        fi
        
        # Add the main command and any extra arguments
        CLI_ARGS+=("${{ inputs.command }}")
        CLI_ARGS+=(${{ inputs.args }})
        
        # Execute the command
        echo "Running: ./${{ steps.asset.outputs.executable }} ${CLI_ARGS[@]}"
        ./${{ steps.asset.outputs.executable }} "${CLI_ARGS[@]}"
